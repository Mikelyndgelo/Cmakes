CMAKE_MINIMUM_REQUIRED(VERSION 3.7)
include(CheckSymbolExists)
SET(CMAKE_CONFIGURATION_TYPES "Release;Debug;" CACHE STRING "Configurations" FORCE)
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS "Debug;")

PROJECT(TrueConfClients)
OPTION(X64_BUILD "Build x64 client." OFF)		
OPTION(USE_IPP "Build with IPP libraries" ON)
OPTION(ENIGMA_PROTECTED "User ENGIMA_PROTECTED define." OFF)

SET(BOOST_DIR $ENV{boost_dir})
SET(CLIENTLIB_EXTLIBS_DIR $ENV{clientlib_extlibs_dir})
SET(QT5_PATH $ENV{qt5_path})

IF(extlibs_dir)
  SET(CLIENTLIB_EXTLIBS_DIR ${extlibs_dir})
ENDIF(extlibs_dir)


IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
# Use or not OPENGL-ES 3.0 (for Windows clients) - Set (true|false)
# If you select TRUE - render use OPENGL-ES 3.0
# If you select FALSE - render use standart OpenGL
#SET(USE_OPENGL_ES TRUE)
SET(USE_OPENGL_ES FALSE)
ENDIF()


IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	
	check_symbol_exists("_M_AMD64" "" RTC_ARCH_X64)
    if(NOT RTC_ARCH_X64)
		check_symbol_exists("_M_IX86" "" RTC_ARCH_X86)
    endif(NOT RTC_ARCH_X64)

	if(RTC_ARCH_X64)
		set(ARCH x64)
	elseif(RTC_ARCH_X86)
		set(ARCH x86)
	endif(RTC_ARCH_X64)
	SET(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build_${ARCH})
	message("CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
	message("MSVC_VERSION: ${MSVC_VERSION}")

	SET(EXTLIBS_VER "tcw_730_20190307.3")

	if(X64_BUILD)
		SET(QT5_PATH $ENV{QT5_PATH_511_X64} CACHE STRING "" FORCE)
		MESSAGE( STATUS "X64 BUILD" )
	else(X64_BUILD)
		SET(QT5_PATH $ENV{QT5_PATH_511} CACHE STRING "" FORCE)
		MESSAGE( STATUS "X86 BUILD" )
	ENDIF(X64_BUILD)
	MESSAGE( STATUS "QT5_PATH is set to ${QT5_PATH}" )
	SET(CLIENTLIB_EXTLIBS_DIR $ENV{master_extlibs_dir}/${EXTLIBS_VER} CACHE STRING "" FORCE)
	SET(BOOST_DIR $ENV{boost_dir_vs2017_md} CACHE STRING "" FORCE)

    IF(NOT EXISTS ${CLIENTLIB_EXTLIBS_DIR})
        MESSAGE(FATAL_ERROR "ERROR: Could not find ${CLIENTLIB_EXTLIBS_DIR}")
        MESSAGE("probably, it placed here: \\dront\\dev\\libs\\ALL\\windows\\vs2017\\")
    ENDIF(NOT EXISTS ${CLIENTLIB_EXTLIBS_DIR})


ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    
    if(DEFINED ARCH)
    else()
        include(CheckTypeSize)
        check_type_size(void* SIZEOF_VOID_PTR)
        if(SIZEOF_VOID_PTR EQUAL 32)
            set(ARCH x86 )
        else()
            set(ARCH x64 )
    endif(SIZEOF_VOID_PTR EQUAL 32)
    endif(DEFINED ARCH)

SET(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build-${ARCH})
    message("---------------------------BINARY DIR = ${CMAKE_BINARY_DIR}")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

message("BOOST_DIR: ${BOOST_DIR}")
message("CLIENTLIB_EXTLIBS_DIR: ${CLIENTLIB_EXTLIBS_DIR}")
message("QT5_PATH: ${QT5_PATH}")

SET(PROJECT_BINARY_DIR ${CMAKE_BINARY_DIR})
SET(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR})

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /Od /Ob0 /RTC1 /D _DEBUG" CACHE STRING "" FORCE)
    SET(CMAKE_CXX_FLAGS "/D /MP /Zi /EHsc /JMC /wd\"4005\" /wd\"4530\" /wd\"4138\"  " CACHE STRING "" FORCE)
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /O2 /Ob2 /D NDEBUG" CACHE STRING "" FORCE )
    #SET(CMAKE_C_FLAGS "-msse2")
    #SET(CMAKE_EXE_LINKER_FLAGS " /FORCE:MULTIPLE /ignore:4099 ")
    #SET(CMAKE_MODULE_LINKER_FLAGS "-msse2 /FORCE:MULTIPLE /ignore:4099 ")
    #SET(CMAKE_SHARED_LINKER_FLAGS "-msse2 /FORCE:MULTIPLE /ignore:4099 ")
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG ")
    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}  /DEBUG ")
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:svml_disp /NODEFAULTLIB:libirc /MAP /SAFESEH:NO")
    SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:svml_disp /NODEFAULTLIB:libirc /MAP /SAFESEH:NO")
	if(${USE_OPENGL_ES})
	# For Windows OpenGl-ES 3 render mode - define 'ANGLE_OPENGL_ES'
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DANGLE_OPENGL_ES" CACHE STRING "" FORCE)
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DANGLE_OPENGL_ES" CACHE STRING "" FORCE ) 
	endif()
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(CMAKE_CXX_STANDARD 17)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -g3 -ggdb")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3 -ggdb")
    SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -g2" )
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g2" )
    message("---------------------------CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
    message("---------------------------CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message("---------------------------CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}")
    message("---------------------------CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}")
    message("---------------------------CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}")
    message("---------------------------CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}")
ELSE (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(CMAKE_CXX_STANDARD 14)
    SET(CMAKE_CXX_FLAGS "-stdlib=libc++")
    SET(CMAKE_EXE_LINKER_FLAGS "-stdlib=libc++")
IF(DEFINED RELEASE_WITH_DSYM)
    SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -g2" )
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g2" ) 
    #SET(CMAKE_XCODE_ATTRIBUTE_DEPLOYMENT_POSTPROCESSING "YES")
    SET(CMAKE_XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
ENDIF(DEFINED RELEASE_WITH_DSYM)
    message("---------------------------CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message("---------------------------CMAKE_C_FLAGS_DEBUG = ${CMAKE_C_FLAGS_DEBUG}")
    message("---------------------------CMAKE_CXX_FLAGS_DEBUG = ${CMAKE_CXX_FLAGS_DEBUG}")
    message("---------------------------CMAKE_C_FLAGS_RELEASE = ${CMAKE_C_FLAGS_RELEASE}")
    message("---------------------------CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")


IF(ENIGMA_PROTECTED)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENIGMA_PROTECTED" CACHE STRING "" FORCE)
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENIGMA_PROTECTED" CACHE STRING "" FORCE)
	MESSAGE( STATUS "Build will use -DENIGMA_PROTECTED" )
ENDIF(ENIGMA_PROTECTED)


CMAKE_POLICY(SET CMP0020 OLD)
CMAKE_POLICY(SET CMP0043 OLD)

SET(CMAKE_PREFIX_PATH ${QT5_PATH})

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")

FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Multimedia REQUIRED)
FIND_PACKAGE(Qt5Gui REQUIRED)
FIND_PACKAGE(Qt5Network REQUIRED)
FIND_PACKAGE(Qt5Svg REQUIRED)
FIND_PACKAGE(Qt5WebEngine REQUIRED)
FIND_PACKAGE(Qt5WebEngineWidgets REQUIRED)
FIND_PACKAGE(Qt5Concurrent REQUIRED)
FIND_PACKAGE(Qt5DBus REQUIRED)
FIND_PACKAGE(Qt5QuickWidgets REQUIRED)

SET(QT_USE_QTMAIN true)
SET(QT_USE_QTSQL false)
SET(QT_USE_QTOPENGL false)
SET(QT_USE_QTNETWORK true)
SET(QT_USE_QTPLUGIN true)
SET(QT_USE_QTMULTIMEDIA true)
SET(QT_USE_QTXML true)
SET(QT_USE_QTDECLARATIVE true)
SET(QT_USE_QTSVG true)

SET(QT_USE_QT3SUPPORT false)
SET(QT_USE_QTASSISTANT false)
SET(QT_USE_QTDESIGNER false)
SET(QT_USE_QTMOTIF false)
SET(QT_USE_QTNSPLUGIN false)
SET(QT_USE_QTTEST false)
SET(QT_USE_QTUITOOLS false)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    SET(QT_USE_QTDBUS false)
ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(QT_USE_QTDBUS true)     
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

SET(QT_USE_QTSCRIPT false)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
set_target_properties(Qt5::Widgets PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "DEBUG")
set_target_properties(Qt5::Multimedia PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "DEBUG")
set_target_properties(Qt5::Gui PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "DEBUG")
set_target_properties(Qt5::Network PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "DEBUG")
set_target_properties(Qt5::Core PROPERTIES MAP_IMPORTED_CONFIG_DEBUG "DEBUG")

set_target_properties(Qt5::Widgets PROPERTIES MAP_IMPORTED_CONFIG_TERMINALDEBUG "DEBUG")
set_target_properties(Qt5::Multimedia PROPERTIES MAP_IMPORTED_CONFIG_TERMINALDEBUG "DEBUG")
set_target_properties(Qt5::Gui PROPERTIES MAP_IMPORTED_CONFIG_TERMINALDEBUG "DEBUG")
set_target_properties(Qt5::Network PROPERTIES MAP_IMPORTED_CONFIG_TERMINALDEBUG "DEBUG")
set_target_properties(Qt5::Core PROPERTIES MAP_IMPORTED_CONFIG_TERMINALDEBUG "DEBUG")

ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")


INCLUDE_DIRECTORIES(
  ${QT_INCLUDE_DIR}
  ${CMAKE_SOURCE_DIR}/includes
)
 
 # add a target to generate Documentation with Doxygen
find_package(Doxygen)
if(DOXYGEN_FOUND)
   message("DOXIGEN Found  .....")

   # Modify fike 'Doxyfile.in' and copy it to 'build' directory as 'Doxyfile'
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)

   add_custom_target(doc ALL
   ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
   COMMENT "Generating Documentation with Doxygen" VERBATIM
)
endif(DOXYGEN_FOUND)
 
ADD_SUBDIRECTORY(ClientCore)
ADD_SUBDIRECTORY(ClientLib)
ADD_SUBDIRECTORY(GLRender)
ADD_SUBDIRECTORY(QtClientGui)
ADD_SUBDIRECTORY(QtClientCore)
ADD_SUBDIRECTORY(QtClientCore/ChatV2Factory)
ADD_SUBDIRECTORY(FTrLibTorrent)
ADD_SUBDIRECTORY(ClientLib/commonlibs/mdnslib)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
ADD_SUBDIRECTORY(QtTerminal)
ADD_SUBDIRECTORY(QtSDK)
ADD_SUBDIRECTORY(Client7)
ADD_SUBDIRECTORY(GuidedClient)
ADD_SUBDIRECTORY(WinBased)
ADD_SUBDIRECTORY(HidApi)
ADD_SUBDIRECTORY(Terminal)
ADD_SUBDIRECTORY(CallXApp)
ADD_SUBDIRECTORY(QMLClient)
ADD_SUBDIRECTORY(Client8)
ADD_SUBDIRECTORY(YuzhUral)
ADD_SUBDIRECTORY(DisplayWatcher)
#ADD_SUBDIRECTORY(ClientLib/commonlibs/chatlib)
#ADD_SUBDIRECTORY(ClientLib/commonlibs/chatlib/factory_asio)
ADD_SUBDIRECTORY(TestProjects)
ADD_SUBDIRECTORY(CallX/CallX)
ADD_SUBDIRECTORY(CallX/PrintPDF)

ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  if(DEFINED TERMINALBUILD)
    ADD_SUBDIRECTORY(GuidedClient)
    ADD_SUBDIRECTORY(QtTerminal)
    ADD_SUBDIRECTORY(Terminal)
  else()
    ADD_SUBDIRECTORY(Client7)
  endif(DEFINED TERMINALBUILD)
  set(CMAKE_CXX_STANDARD 17)
#  ADD_SUBDIRECTORY(ClientLib/commonlibs/chatlib)
#  ADD_SUBDIRECTORY(ClientLib/commonlibs/chatlib/factory_asio)
  ADD_SUBDIRECTORY(LinuxBased)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  if(DEFINED SDK_DLL)
    ADD_SUBDIRECTORY(QtTerminal)
    ADD_SUBDIRECTORY(QtSDK)
  else()
    ADD_SUBDIRECTORY(Client7)
  endif(DEFINED SDK_DLL)
  ADD_SUBDIRECTORY(OSXBased)
  set_target_properties(QtClientCore PROPERTIES XCODE_ATTRIBUTE_CLANG_LINK_OBJC_RUNTIME "NO")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")


IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  ADD_DEPENDENCIES(QtClientCore QtClientGui)
  ADD_DEPENDENCIES(Client7 ClientCore QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent WinBased HidApi)
  ADD_DEPENDENCIES(Terminal ClientCore QtClientCore ClientLib GLRender FTrLibTorrent WinBased HidApi QtTerminal)
  ADD_DEPENDENCIES(Client8 ClientCore QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent WinBased HidApi QMLClient)
  ADD_DEPENDENCIES(CallXApp CallX PrintPDF QtClientCore ClientLib GLRender FTrLibTorrent WinBased HidApi QtTerminal)
  ADD_DEPENDENCIES(QtSDK ClientCore QtClientCore ClientLib GLRender FTrLibTorrent WinBased HidApi QtTerminal) 
  ADD_DEPENDENCIES(TestProjects ClientCore QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent WinBased HidApi)
  ADD_DEPENDENCIES(YuzhUral ClientCore QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent WinBased HidApi)
  SET_PROPERTY(DIRECTORY PROPERTY VS_STARTUP_PROJECT "Client7")
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  ADD_DEPENDENCIES(QtClientCore QtClientGui)
  if(DEFINED TERMINALBUILD)
    ADD_DEPENDENCIES(Terminal QtClientCore ClientLib GLRender FTrLibTorrent LinuxBased QtTerminal)
  else()
    ADD_DEPENDENCIES(QtClientCore QtClientGui)
    ADD_DEPENDENCIES(Client7 QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent LinuxBased)
  endif(DEFINED TERMINALBUILD)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  if(DEFINED SDK_DLL)
    ADD_DEPENDENCIES(QtSDK QtClientCore ClientLib GLRender FTrLibTorrent OSXBased QtTerminal)
  else()
    ADD_DEPENDENCIES(Client7 QtClientCore QtClientGui ClientLib GLRender FTrLibTorrent OSXBased)
  endif(DEFINED SDK_DLL)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

